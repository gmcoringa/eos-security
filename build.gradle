buildscript {

	repositories { mavenCentral() }

	dependencies {
   		classpath('org.springframework.boot:spring-boot-gradle-plugin:1.2.0.RELEASE')
	}
}

subprojects {

	group = 'eos-security'
	version = '0.0.1'

	repositories {
	    mavenCentral()
	}

	apply plugin: 'java'
	apply plugin: 'eclipse-wtp'

	archivesBaseName = 'eos-security'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

}

	// Dependencies
	List SPRING = ['org.springframework:spring-core:4.1.3.RELEASE', 'org.springframework:spring-context:4.1.3.RELEASE', 
		'org.springframework:spring-beans:4.1.3.RELEASE', 'org.springframework:spring-web:4.1.3.RELEASE']

	List SPRING_BOOT = ['org.springframework.boot:spring-boot-starter:1.2.0.RELEASE', 
		'org.springframework.boot:spring-boot-starter-undertow:1.2.0.RELEASE']

	List JSON = ['org.codehaus.jackson:jackson-core-asl:1.9.13', 'org.codehaus.jackson:jackson-mapper-asl:1.9.13']

	List JERSEY = ['org.glassfish.jersey.containers:jersey-container-servlet:2.12', 'org.glassfish.jersey.ext:jersey-spring3:2.12', 
		'org.glassfish.jersey.media:jersey-media-json-jackson:2.12']

	List TEST = ['junit:junit:4.11', 'org.mockito:mockito-core:1.9.5', 'org.neo4j:neo4j-kernel:2.1.3:tests', 
		'org.springframework:spring-test:4.1.3.RELEASE']

	List LOGBACK = ['ch.qos.logback:logback-classic:1.1.2', 'ch.qos.logback:logback-core:1.1.2']

project(':common-util'){
	jar {
		appendix = 'common-util'
	}

	description = 'Commons - Utitlies'
}

project(':api'){
	jar {
		appendix = 'api'
	}

	dependencies {
		compile project(':common-util')
	}
}

project(':graph-impl'){	
	jar {
		appendix = 'graph-impl'
	}

	dependencies {

		compile project(':common-util'), project(':api'),
			'org.slf4j:slf4j-api:1.7.7', 'commons-codec:commons-codec:1.9', SPRING, JSON, 'org.neo4j:neo4j:2.1.3'

		testCompile TEST, JSON, SPRING, 'org.slf4j:slf4j-api:1.7.7', 'org.neo4j:neo4j:2.1.3'
	}
}

project(':web'){
	apply plugin: 'war'
	apply plugin: 'jetty'
	apply plugin: 'spring-boot'

	dependencies {

		compile project(':common-util'), project(':api'), JERSEY, JSON, SPRING, SPRING_BOOT,
			'javax.ws.rs:javax.ws.rs-api:2.0', 'org.slf4j:slf4j-api:1.7.7', 'org.neo4j:neo4j:2.1.3', 'org.scannotation:scannotation:1.0.3'

		providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

		testCompile project(':rest-client'), 'junit:junit:4.11', 'org.springframework.boot:spring-boot-starter-test:1.2.0.RELEASE'

		runtime LOGBACK, project(':graph-impl')

		// Integration Test Structure
		sourceSets {
		    integration {
		        java.srcDir file('src/integration/java')
		        resources.srcDir file('src/integration/resources')
		    }
		}

	    integrationCompile sourceSets.main.output
	    integrationCompile configurations.testCompile
	    integrationCompile sourceSets.test.output
	    integrationRuntime configurations.testRuntime
	}

	task integration(type: Test, dependsOn: 'war') {
	    testClassesDir = sourceSets.integration.output.classesDir
	    classpath = sourceSets.integration.runtimeClasspath

		doFirst {
	    	println 'Starting embedded Jetty'

	    	jettyRunWar.httpPort = 8899
	    	[jettyRunWar, jettyStop]*.stopPort = 8877
	    	[jettyRunWar, jettyStop]*.stopKey = 'stopKey'
	    	jettyRunWar.daemon = true
	    	jettyRunWar.contextPath = 'eos-security'

	    	jettyRunWar.execute()
	    }

	    doLast {
	    	println 'Stoping embedded Jetty'

	    	jettyStop.stopPort = 8877
	    	jettyStop.stopKey = 'stopKey'

	    	jettyStop.execute()
	    }

	    onlyIf { !project.hasProperty('skipIntegration') }
	}

	check.dependsOn integration
}

project(':rest-client'){
	jar {
		appendix = 'rest-client'
	}

	dependencies {
		compile project(':api'), 'org.slf4j:slf4j-api:1.7.7', 'javax.ws.rs:javax.ws.rs-api:2.0.1', 'org.json:json:20140107',
			'org.glassfish.jersey.core:jersey-client:2.12', 'org.glassfish.jersey.media:jersey-media-json-jackson:2.12'

		runtime LOGBACK
	}
}


// TODO remove hibernate validation, validate undertow